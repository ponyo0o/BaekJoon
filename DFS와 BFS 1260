import sys
from collections import deque

n,m,v=map(int,sys.stdin.readline().split())   # N:정점개수, M:간선개수, V:시작정점 번호
li=[[0]*(n+1) for i in range(n+1)]       # 인접행렬 생성 (var_N +1 사이즈 만큼 행과 열),  #n+1한 이유는 0번째 인덱스를 사용하지않고  1~4까지를 표현하기위해 
visited=[0]*(n+1)                  #내가 방문한 점을 또 방문하면 안되니까 visited라는 1차원 행렬을 만들어줍니다.

for i in range(m):                 # 인접행렬 세팅 
    a,b=map(int,sys.stdin.readline().split())       
    li[a][b]=1
    li[b][a]=1

def dfs(v):
    visited[v]=1          #방문체크
    print(v,end=' ')      #방문한 노드 출력
    for i in range(1,n+1):      
        if visited[i]==0 and li[v][i]==1:     # 방문하지 않았고, 현재 노드에 인접한 노드 방문시 재귀
            dfs(i)        # 재귀

# def bfs(v):           #BFS방법1
#     queue=[v]           # queue에 현재 노드 세팅
#     visited[v]=0        # dfs를 돌았기 때문에, 초기화(아까 DFS함수를 돌면서 visited리스트의 인덱스값을 모두 1로 바꾸어 주었던 상태이므로 1인상태가 방문을 안한상태이니까 방문을 했을 경우 0으로 바꾸어준다.)
#     while queue:
#         node=queue[0]          # 현재 큐의 노드 세팅
#         print(node,end=' ')    # 방문한 노드 출력
#         del queue[0]           # queue[0] 삭제
#         for i in range(1,n+1):
#             if visited[i]==1 and li[node][i]==1:      # 방문했고 인접노드 방문했으면 큐에 노드 추가하고 방문 초기화
#                 queue.append(i)
#                 visited[i]=0

def bfs(v):              #BFS방법2
    queue=[v]             # 출발점
    visited=[v]           # 방문
    while queue:
        t=queue.pop(0)      # queue[0] 삭제
        for i in range(1,n+1):
            if i not in visited and li[t][i]==1:        # 방문하지 않았고, 현재 노드에 인접한 노드 방문시
                queue.append(i)                     #큐에 노드추가
                visited.append(i)                   # visited에 방문했다고 표시하기 위해 추가
    return visited            #visited값 리턴

dfs(v)
print()
#bfs(v) #방법1출력
print(*bfs(v)) #방법2출력

