n,m=map(int,input().split())
visited=[False]*(n+1)  #탐사여부를 확인하는 리스트
stack=[]   #조건에 맞는 수를 저장하고 출력해줄 리스트

def dfs(depth,idx,n,m):
    if depth==m:
        print(*stack)
        return
    for i in range(idx,n+1):
        if not visited[i]:  #탐사안했다면(즉,False)
            visited[i]=True #탐사 시작(중복을 제거 해주기위해)
            stack.append(i) #탐사내용
            dfs(depth+1,i,n,m) #깊이 우선 탐색
            visited[i]=False  #깊이 탐사 완료
            stack.pop() #탐사 내용 제거 

dfs(0,1,n,m)


from itertools import combinations         #Python 내부 함수 itertools의 combinations를 이용하는 간단한 방법
N, M = map(int, input().split())
C = combinations(range(1, N+1), M)  # iter(tuple)
for i in C:
    print(' '.join(map(str, i)))  # tuple -> str
